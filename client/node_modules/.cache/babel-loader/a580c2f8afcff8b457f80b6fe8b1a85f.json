{"ast":null,"code":"import axios from 'axios';\nimport { url } from '../config';\nimport { LOGIN_SUCCESS, GET_USER, REGISTER_SUCCESS, REGISTER_FAIL, LOGOUT } from './types'; // Load user\n\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await axios.get(url + '/api/auth/me');\n    dispatch({\n      type: GET_USER,\n      payload: res.data.data\n    });\n  } catch (err) {\n    console.log(err.message);\n  }\n}; // Login user\n\nexport const login = (name, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${url}/api/auth/login`, body, config);\n    await dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    await loadUser();\n  } catch (err) {\n    console.log(err.message);\n  }\n}; // Register user\n\nexport const register = (name, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${url}/api/auth/register`, body, config);\n    console.log(res);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    loadUser();\n  } catch (err) {\n    console.error(err.message);\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Logout user\n\nexport const logout = () => async dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/admin/Desktop/ReactHillBrewing/client/src/actions/auth.js"],"names":["axios","url","LOGIN_SUCCESS","GET_USER","REGISTER_SUCCESS","REGISTER_FAIL","LOGOUT","loadUser","dispatch","res","get","type","payload","data","err","console","log","message","login","name","password","config","headers","body","JSON","stringify","post","register","error","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,WAApB;AAEA,SACIC,aADJ,EAEIC,QAFJ,EAGIC,gBAHJ,EAIIC,aAJJ,EAKIC,MALJ,QAMO,SANP,C,CASA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAE5C,MAAI;AAEA,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUT,GAAG,GAAG,cAAhB,CAAlB;AAEAO,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAER,QADD;AAELS,MAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASA;AAFb,KAAD,CAAR;AAKH,GATD,CASE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACH;AACJ,CAdM,C,CAgBP;;AACA,OAAO,MAAMC,KAAK,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB,MAAMZ,QAAN,IAAkB;AAEvD,QAAMa,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX;AADE,GAAf;AAOA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEN,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAf,CAAb;;AAEA,MAAI;AAEA,UAAMX,GAAG,GAAG,MAAMT,KAAK,CAAC0B,IAAN,CAAY,GAAEzB,GAAI,iBAAlB,EAAoCsB,IAApC,EAA0CF,MAA1C,CAAlB;AAEA,UAAMb,QAAQ,CAAC;AACXG,MAAAA,IAAI,EAAET,aADK;AAEXU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFF,KAAD,CAAd;AAKA,UAAMN,QAAQ,EAAd;AAEH,GAXD,CAWE,OAAOO,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACH;AACJ,CAzBM,C,CA4BP;;AACA,OAAO,MAAMU,QAAQ,GAAG,CAACR,IAAD,EAAOC,QAAP,KAAoB,MAAMZ,QAAN,IAAkB;AAE1D,QAAMa,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEN,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAf,CAAb;;AAEA,MAAI;AACA,UAAMX,GAAG,GAAG,MAAMT,KAAK,CAAC0B,IAAN,CAAY,GAAEzB,GAAI,oBAAlB,EAAuCsB,IAAvC,EAA6CF,MAA7C,CAAlB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AAEAD,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEP,gBADD;AAELQ,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAKAN,IAAAA,QAAQ;AAEX,GAXD,CAWE,OAAOO,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACa,KAAR,CAAcd,GAAG,CAACG,OAAlB;AACAT,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEN;AADD,KAAD,CAAR;AAGH;AACJ,CA3BM,C,CA8BP;;AACA,OAAO,MAAMwB,MAAM,GAAG,MAAM,MAAMrB,QAAN,IAAkB;AAC1CA,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAEL;AADD,GAAD,CAAR;AAGH,CAJM","sourcesContent":["import axios from 'axios';\nimport { url } from '../config';\n\nimport {\n    LOGIN_SUCCESS,\n    GET_USER,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGOUT\n} from './types';\n\n\n// Load user\nexport const loadUser = () => async dispatch => {\n\n    try {\n\n        const res = await axios.get(url + '/api/auth/me');\n\n        dispatch({\n            type: GET_USER,\n            payload: res.data.data\n        })\n\n    } catch (err) {\n        console.log(err.message);\n    }\n}\n\n// Login user\nexport const login = (name, password) => async dispatch => {\n\n    const config = {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ name, password });\n\n    try {\n\n        const res = await axios.post(`${url}/api/auth/login`, body, config);\n\n        await dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        })\n\n        await loadUser();\n\n    } catch (err) {\n        console.log(err.message);\n    }\n}\n\n\n// Register user\nexport const register = (name, password) => async dispatch => {\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ name, password })\n    \n    try {\n        const res = await axios.post(`${url}/api/auth/register`, body, config);\n        console.log(res);\n\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        })\n\n        loadUser();\n\n    } catch (err) {\n        console.error(err.message);\n        dispatch({\n            type: REGISTER_FAIL,\n        })\n    }\n}\n\n\n// Logout user\nexport const logout = () => async dispatch => {\n    dispatch({\n        type: LOGOUT\n    })\n}"]},"metadata":{},"sourceType":"module"}