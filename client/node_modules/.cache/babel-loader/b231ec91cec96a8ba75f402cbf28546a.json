{"ast":null,"code":"import React,{useEffect}from'react';import{connect}from'react-redux';import{getCategories}from'../../../actions/dashboard';import CategorySidebarItem from'./CategorySidebarItem';import{getAllRecipes}from'../../../actions/dashboard';import{changeEditMode}from'../../../actions/dashboard';var CategorySidebar=function CategorySidebar(_ref){var categories=_ref.categories,recipes=_ref.recipes,getCategories=_ref.getCategories,getAllRecipes=_ref.getAllRecipes,changeEditMode=_ref.changeEditMode,editMode=_ref.editMode;useEffect(function(){getCategories();getAllRecipes();},[getCategories,getAllRecipes]);var onNewCategory=function onNewCategory(){changeEditMode('addCategory');};return/*#__PURE__*/React.createElement(\"div\",{className:\"dash-card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"dash-card-header\"},/*#__PURE__*/React.createElement(\"img\",{src:\"../../../../img/beer-categories.png\",alt:\"\",className:\"dash-card-icon\"}),\"Beer Categories\"),/*#__PURE__*/React.createElement(\"div\",{className:\"dash-card-body\"},/*#__PURE__*/React.createElement(\"ul\",null,categories.filter(function(category){return category.title!=='Latest';}).map(function(category){return/*#__PURE__*/React.createElement(CategorySidebarItem,{key:category._id,category:category.title,recipeCount:recipes.filter(function(recipe){return recipe.category===category.title;}).length});}))),editMode!=='addCategory'&&/*#__PURE__*/React.createElement(\"button\",{id:\"new-category\",className:\"btn-grey\",onClick:onNewCategory},\"+ New Category\"));};var mapStateToProps=function mapStateToProps(state){return{recipes:state.dashboard.recipes,editMode:state.dashboard.editMode,categories:state.dashboard.categories};};export default connect(mapStateToProps,{getCategories:getCategories,getAllRecipes:getAllRecipes,changeEditMode:changeEditMode})(CategorySidebar);","map":{"version":3,"sources":["/Users/admin/Desktop/ReactHillBrewing/client/src/components/dashboard/categories/CategorySidebar.js"],"names":["React","useEffect","connect","getCategories","CategorySidebarItem","getAllRecipes","changeEditMode","CategorySidebar","categories","recipes","editMode","onNewCategory","filter","category","title","map","_id","recipe","length","mapStateToProps","state","dashboard"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,aAAT,KAA8B,4BAA9B,CACA,MAAOC,CAAAA,mBAAP,KAAgC,uBAAhC,CACA,OAASC,aAAT,KAA8B,4BAA9B,CACA,OAASC,cAAT,KAA+B,4BAA/B,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAAsF,IAAlFC,CAAAA,UAAkF,MAAlFA,UAAkF,CAAtEC,OAAsE,MAAtEA,OAAsE,CAA7DN,aAA6D,MAA7DA,aAA6D,CAA9CE,aAA8C,MAA9CA,aAA8C,CAA/BC,cAA+B,MAA/BA,cAA+B,CAAfI,QAAe,MAAfA,QAAe,CAC1GT,SAAS,CAAC,UAAM,CACZE,aAAa,GACbE,aAAa,GAChB,CAHQ,CAGN,CAACF,aAAD,CAAgBE,aAAhB,CAHM,CAAT,CAKA,GAAMM,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACxBL,cAAc,CAAC,aAAD,CAAd,CACH,CAFD,CAIA,mBACI,2BAAK,SAAS,CAAC,WAAf,eACI,2BAAK,SAAS,CAAC,kBAAf,eACI,2BAAK,GAAG,CAAC,qCAAT,CAA+C,GAAG,CAAC,EAAnD,CAAsD,SAAS,CAAC,gBAAhE,EADJ,mBADJ,cAKI,2BAAK,SAAS,CAAC,gBAAf,eACI,8BAEKE,UAAU,CACNI,MADJ,CACW,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,KAAT,GAAmB,QAAvB,EADnB,EAEIC,GAFJ,CAEQ,SAAAF,QAAQ,qBACb,oBAAC,mBAAD,EAAqB,GAAG,CAAEA,QAAQ,CAACG,GAAnC,CAAwC,QAAQ,CAAEH,QAAQ,CAACC,KAA3D,CACI,WAAW,CAAGL,OAAO,CAACG,MAAR,CAAe,SAAAK,MAAM,QAAIA,CAAAA,MAAM,CAACJ,QAAP,GAAoBA,QAAQ,CAACC,KAAjC,EAArB,EAA6DI,MAD/E,EADa,EAFhB,CAFL,CADJ,CALJ,CAmBMR,QAAQ,GAAK,aAAb,eAA8B,8BAAQ,EAAE,CAAC,cAAX,CAA0B,SAAS,CAAC,UAApC,CAA+C,OAAO,CAAEC,aAAxD,mBAnBpC,CADJ,CAuBH,CAjCD,CAoCA,GAAMQ,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CAC9BX,OAAO,CAAEW,KAAK,CAACC,SAAN,CAAgBZ,OADK,CAE9BC,QAAQ,CAAEU,KAAK,CAACC,SAAN,CAAgBX,QAFI,CAG9BF,UAAU,CAAEY,KAAK,CAACC,SAAN,CAAgBb,UAHE,CAAL,EAA7B,CAMA,cAAeN,CAAAA,OAAO,CAACiB,eAAD,CAAkB,CAAEhB,aAAa,CAAbA,aAAF,CAAiBE,aAAa,CAAbA,aAAjB,CAAgCC,cAAc,CAAdA,cAAhC,CAAlB,CAAP,CAA2EC,eAA3E,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { getCategories } from '../../../actions/dashboard';\nimport CategorySidebarItem from './CategorySidebarItem'\nimport { getAllRecipes } from '../../../actions/dashboard';\nimport { changeEditMode } from '../../../actions/dashboard'\n\nconst CategorySidebar = ({  categories, recipes, getCategories, getAllRecipes, changeEditMode, editMode }) => {\n    useEffect(() => {\n        getCategories();\n        getAllRecipes();\n    }, [getCategories, getAllRecipes]);  \n\n    const onNewCategory = () => {\n        changeEditMode('addCategory');\n    }\n\n    return (\n        <div className=\"dash-card\">\n            <div className=\"dash-card-header\">\n                <img src=\"../../../../img/beer-categories.png\" alt=\"\" className=\"dash-card-icon\" />\n            Beer Categories\n        </div>\n            <div className=\"dash-card-body\">\n                <ul>\n                    \n                    {categories\n                        .filter(category => category.title !== 'Latest')\n                        .map(category => (\n                        <CategorySidebarItem key={category._id} category={category.title} \n                            recipeCount={ recipes.filter(recipe => recipe.category === category.title).length} \n                        />\n                    ))}\n                    \n                </ul>\n            </div>\n\n            { editMode !== 'addCategory' && <button id=\"new-category\" className=\"btn-grey\" onClick={onNewCategory} >+ New Category</button> }\n        </div>\n    )\n}\n\n\nconst mapStateToProps = state => ({\n    recipes: state.dashboard.recipes,\n    editMode: state.dashboard.editMode,\n    categories: state.dashboard.categories\n});\n\nexport default connect(mapStateToProps, { getCategories, getAllRecipes, changeEditMode })(CategorySidebar);"]},"metadata":{},"sourceType":"module"}